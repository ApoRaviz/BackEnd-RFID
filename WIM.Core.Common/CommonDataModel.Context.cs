//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WIM.Core.Common
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using Newtonsoft.Json;
    using System.Linq;
    using System.Data.SqlClient;
    using Newtonsoft.Json.Linq;
    using WIM.Core.Entity.CustomerManagement;
    using WIM.Core.Context;
    using System.Collections.Generic;

    public partial class CommonContext : DbContext
    {
        //OilComment
        public CommonContext()
            : base("name=CORE")//CommonContext
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserLog> UserLogs { get; set; }
    
        public virtual ObjectResult<string> ProcGetTableDescription(string tableName)
        {

            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
            

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProcGetTableDescription", tableNameParameter);
        }

        public virtual string ProcGetTableDescriptionWms(string tableName)
        {
            var tableNameParameter = /*new ObjectParameter("@tableName", tableName);*/
            new SqlParameter("tableName", tableName);

            using (WMS.Context.WMSDbContext Db = new WMS.Context.WMSDbContext())
            {
                return Db.Database.SqlQuery<string>("ProcGetTableDescription @tableName",tableNameParameter).FirstOrDefault();
            }
        }

        public virtual ObjectResult<ProcGetUserLog_Result> ProcGetUserLog(Nullable<int> logID, string requestMethod, string requestUrl, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo)
        {
            var logIDParameter = logID.HasValue ?
                new ObjectParameter("LogID", logID) :
                new ObjectParameter("LogID", typeof(int));
    
            var requestMethodParameter = requestMethod != null ?
                new ObjectParameter("RequestMethod", requestMethod) :
                new ObjectParameter("RequestMethod", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetUserLog_Result>("ProcGetUserLog", logIDParameter, requestMethodParameter, requestUrlParameter, requestDateFromParameter, requestDateToParameter);
        }

        public virtual string ProcGetDataAutoComplete(string columnNames, string tableName, string conditionColumnNames, string keyword)
        {
            var columnNamesParameter = /*new ObjectParameter("@columnNames", columnNames);*/
            new SqlParameter("columnNames", columnNames);

            var tableNameParameter = /*new ObjectParameter("@tableName", tableName);*/
            new SqlParameter("tableName", tableName);

            var conditionColumnNamesParameter = /*new ObjectParameter("@conditionColumnNames", conditionColumnNames);*/
            new SqlParameter("conditionColumnNames", conditionColumnNames);

            var keywordParameter = /*new ObjectParameter("@keyword", keyword);*/
            new SqlParameter("keyword", keyword);
            string x;
            using (CoreDbContext Db = new CoreDbContext())
            {
                var y = Db.Database.SqlQuery<string>("ProcGetDataAutoComplete @columnNames, @tableName, @conditionColumnNames, @keyword", columnNamesParameter, tableNameParameter, conditionColumnNamesParameter, keywordParameter);
               
                x = y.FirstOrDefault();
            }
            //var y = ((IObjectContextAdapter)this).ObjectContext.ExecuteStoreQuery<string>
            //    ("exec ProcGetDataAutoComplete @columnNames,@tableName,@conditionColumnNames,@keyword", columnNamesParameter, tableNameParameter, conditionColumnNamesParameter, keywordParameter);
            return x;
            
        }

        

        public virtual List<ProcGetTableColumnsDescription_Result> ProcGetTableColumnsDescription(string tableName)
        {
            //return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetTableColumnsDescription_Result>("ProcGetTableColumnsDescription", tableNameParameter);
            var tableNameParameter = /*new ObjectParameter("@tableName", tableName);*/
            new SqlParameter("tableName", tableName);
            List<ProcGetTableColumnsDescription_Result> x;
            using (WMS.Context.WMSDbContext Db = new WMS.Context.WMSDbContext())
            {
                x = Db.Database.SqlQuery<ProcGetTableColumnsDescription_Result>("ProcGetTableColumnsDescription @tableName", tableNameParameter).ToList();
            }
            
            if (x.Count == 0)
                {
                    using (CoreDbContext db = new CoreDbContext())
                    {
                    var tableNameParameter2 = /*new ObjectParameter("@tableName", tableName);*/
                        new SqlParameter("tableName", tableName);
                    x = db.Database.SqlQuery<ProcGetTableColumnsDescription_Result>("ProcGetTableColumnsDescription @tableName", tableNameParameter2).ToList();
                    }

                }
            return x;
            
        }
    }
}
