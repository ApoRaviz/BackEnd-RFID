//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WMS.Master
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MasterContext : DbContext
    {
        public MasterContext()
            : base("name=MasterContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Unit_MT> Unit_MT { get; set; }
        public virtual DbSet<Project_MT> Project_MT { get; set; }
        public virtual DbSet<Inspect_MT> Inspect_MT { get; set; }
        public virtual DbSet<ItemInspectMapping> ItemInspectMapping { get; set; }
        public virtual DbSet<InspectType> InspectTypes { get; set; }
        public virtual DbSet<Supplier_MT> Supplier_MT { get; set; }
        public virtual DbSet<Category_MT> Category_MT { get; set; }
        public virtual DbSet<Location_MT> Location_MT { get; set; }
        public virtual DbSet<Warehouse_MT> Warehouse_MT { get; set; }
        public virtual DbSet<Item_MT> Item_MT { get; set; }
        public virtual DbSet<ItemUnitMapping> ItemUnitMapping { get; set; }
        public virtual DbSet<Menu_MT> Menu_MT { get; set; }
        public virtual DbSet<MenuProjectMapping> MenuProjectMappings { get; set; }
        public virtual DbSet<RolePermission> RolePermission { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<LabelLayoutDetail_MT> LabelLayoutDetail_MT { get; set; }
        public virtual DbSet<LabelLayoutHeader_MT> LabelLayoutHeader_MT { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<ReportLayoutDetail_MT> ReportLayoutDetail_MT { get; set; }
        public virtual DbSet<ReportLayoutHeader_MT> ReportLayoutHeader_MT { get; set; }
        public virtual DbSet<UserProjectMapping> UserProjectMappings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ImportDefinitionDetail_MT> ImportDefinitionDetail_MT { get; set; }
        public virtual DbSet<ImportDefinitionHeader_MT> ImportDefinitionHeader_MT { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<DimensionLayout_MT> DimensionLayout_MT { get; set; }
        public virtual DbSet<ZoneLayoutHeader_MT> ZoneLayoutHeader_MT { get; set; }
        public virtual DbSet<ZoneLayoutDetail_MT> ZoneLayoutDetail_MT { get; set; }
        public virtual DbSet<RackLayout_MT> RackLayout_MT { get; set; }
        public virtual DbSet<ItemSet_MT> ItemSet_MT { get; set; }
        public virtual DbSet<ItemSetDetail> ItemSetDetails { get; set; }
        public virtual DbSet<UserCustomerMapping> UserCustomerMappings { get; set; }
        public virtual DbSet<Customer_MT> Customer_MT { get; set; }
        public virtual DbSet<Label_MT> Label_MT { get; set; }
        public virtual DbSet<Api_MT> Api_MT { get; set; }
        public virtual DbSet<Person_MT> Person_MT { get; set; }
        public virtual DbSet<Employee_MT> Employee_MT { get; set; }
        public virtual DbSet<ApiMenuMapping> ApiMenuMappings { get; set; }
        public virtual DbSet<CurrencyUnit> CurrencyUnits { get; set; }
        public virtual DbSet<Country_MT> Country_MT { get; set; }
    
        public virtual ObjectResult<ProcGetCustomers_Result> ProcGetCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetCustomers_Result>("ProcGetCustomers");
        }
    
        public virtual ObjectResult<ProcGetProjects_Result> ProcGetProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetProjects_Result>("ProcGetProjects");
        }
    
        public virtual ObjectResult<ProcGetCustomerByCusIDSys_Result> ProcGetCustomerByCusIDSys(Nullable<int> cusIDSys)
        {
            var cusIDSysParameter = cusIDSys.HasValue ?
                new ObjectParameter("CusIDSys", cusIDSys) :
                new ObjectParameter("CusIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetCustomerByCusIDSys_Result>("ProcGetCustomerByCusIDSys", cusIDSysParameter);
        }
    
        public virtual ObjectResult<ProcGetProjectByProjectIDSys_Result> ProcGetProjectByProjectIDSys(Nullable<int> projectIDSys)
        {
            var projectIDSysParameter = projectIDSys.HasValue ?
                new ObjectParameter("ProjectIDSys", projectIDSys) :
                new ObjectParameter("ProjectIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetProjectByProjectIDSys_Result>("ProcGetProjectByProjectIDSys", projectIDSysParameter);
        }
    
        public virtual ObjectResult<ProcGetUnitByUnitIDSys_Result> ProcGetUnitByUnitIDSys(Nullable<int> unitIDSys)
        {
            var unitIDSysParameter = unitIDSys.HasValue ?
                new ObjectParameter("UnitIDSys", unitIDSys) :
                new ObjectParameter("UnitIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetUnitByUnitIDSys_Result>("ProcGetUnitByUnitIDSys", unitIDSysParameter);
        }
    
        public virtual ObjectResult<ProcGetUnits_Result> ProcGetUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetUnits_Result>("ProcGetUnits");
        }
    
        public virtual ObjectResult<ProcGetCustomersAutoComplete_Result> ProcGetCustomersAutoComplete(string keyword, string field)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetCustomersAutoComplete_Result>("ProcGetCustomersAutoComplete", keywordParameter, fieldParameter);
        }
    
        public virtual ObjectResult<ProcGetProjectsByCusIDSys_Result> ProcGetProjectsByCusIDSys(Nullable<int> cusIDSys)
        {
            var cusIDSysParameter = cusIDSys.HasValue ?
                new ObjectParameter("CusIDSys", cusIDSys) :
                new ObjectParameter("CusIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetProjectsByCusIDSys_Result>("ProcGetProjectsByCusIDSys", cusIDSysParameter);
        }
    
        public virtual ObjectResult<string> ProcGetNewID(string prefixes)
        {
            var prefixesParameter = prefixes != null ?
                new ObjectParameter("Prefixes", prefixes) :
                new ObjectParameter("Prefixes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProcGetNewID", prefixesParameter);
        }
    
        public virtual ObjectResult<ProcGetItemByItemIDSys_Result> ProcGetItemByItemIDSys(Nullable<int> itemIDSys)
        {
            var itemIDSysParameter = itemIDSys.HasValue ?
                new ObjectParameter("ItemIDSys", itemIDSys) :
                new ObjectParameter("ItemIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetItemByItemIDSys_Result>("ProcGetItemByItemIDSys", itemIDSysParameter);
        }
    
        public virtual ObjectResult<ProcGetItems_Result> ProcGetItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetItems_Result>("ProcGetItems");
        }
    
        public virtual ObjectResult<ProcGetItemUnit_Result> ProcGetItemUnit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetItemUnit_Result>("ProcGetItemUnit");
        }
    
        public virtual ObjectResult<ProcGetItemUnitByItemIDSysAndUnitIDSys_Result> ProcGetItemUnitByItemIDSysAndUnitIDSys(Nullable<int> itemIDSys, Nullable<int> unitIDSys)
        {
            var itemIDSysParameter = itemIDSys.HasValue ?
                new ObjectParameter("ItemIDSys", itemIDSys) :
                new ObjectParameter("ItemIDSys", typeof(int));
    
            var unitIDSysParameter = unitIDSys.HasValue ?
                new ObjectParameter("UnitIDSys", unitIDSys) :
                new ObjectParameter("UnitIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetItemUnitByItemIDSysAndUnitIDSys_Result>("ProcGetItemUnitByItemIDSysAndUnitIDSys", itemIDSysParameter, unitIDSysParameter);
        }
    
        public virtual ObjectResult<ProcGetReportData_Result> ProcGetReportData(Nullable<int> reportID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetReportData_Result>("ProcGetReportData", reportIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcCreateLabelLayout(string forTable, string formatName, Nullable<decimal> width, string widthUnit, Nullable<decimal> height, string heightUnit, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var forTableParameter = forTable != null ?
                new ObjectParameter("ForTable", forTable) :
                new ObjectParameter("ForTable", typeof(string));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var widthUnitParameter = widthUnit != null ?
                new ObjectParameter("WidthUnit", widthUnit) :
                new ObjectParameter("WidthUnit", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var heightUnitParameter = heightUnit != null ?
                new ObjectParameter("HeightUnit", heightUnit) :
                new ObjectParameter("HeightUnit", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcCreateLabelLayout", forTableParameter, formatNameParameter, widthParameter, widthUnitParameter, heightParameter, heightUnitParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual int ProcUpdateLabelLayout(Nullable<int> labelIDSys, string formatName, Nullable<decimal> width, string widthUnit, Nullable<decimal> height, string heightUnit, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var labelIDSysParameter = labelIDSys.HasValue ?
                new ObjectParameter("LabelIDSys", labelIDSys) :
                new ObjectParameter("LabelIDSys", typeof(int));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var widthUnitParameter = widthUnit != null ?
                new ObjectParameter("WidthUnit", widthUnit) :
                new ObjectParameter("WidthUnit", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var heightUnitParameter = heightUnit != null ?
                new ObjectParameter("HeightUnit", heightUnit) :
                new ObjectParameter("HeightUnit", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcUpdateLabelLayout", labelIDSysParameter, formatNameParameter, widthParameter, widthUnitParameter, heightParameter, heightUnitParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual int ProcUpdateReportLayout(Nullable<int> reportIDSys, string formatName, string formatType, string fileExtention, string delimiter, string textGualifier, string encoding, Nullable<int> startExportRow, Nullable<bool> includeHeader, Nullable<bool> addHeaderLayout, string headerLayout, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var reportIDSysParameter = reportIDSys.HasValue ?
                new ObjectParameter("ReportIDSys", reportIDSys) :
                new ObjectParameter("ReportIDSys", typeof(int));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var formatTypeParameter = formatType != null ?
                new ObjectParameter("FormatType", formatType) :
                new ObjectParameter("FormatType", typeof(string));
    
            var fileExtentionParameter = fileExtention != null ?
                new ObjectParameter("FileExtention", fileExtention) :
                new ObjectParameter("FileExtention", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var textGualifierParameter = textGualifier != null ?
                new ObjectParameter("TextGualifier", textGualifier) :
                new ObjectParameter("TextGualifier", typeof(string));
    
            var encodingParameter = encoding != null ?
                new ObjectParameter("Encoding", encoding) :
                new ObjectParameter("Encoding", typeof(string));
    
            var startExportRowParameter = startExportRow.HasValue ?
                new ObjectParameter("StartExportRow", startExportRow) :
                new ObjectParameter("StartExportRow", typeof(int));
    
            var includeHeaderParameter = includeHeader.HasValue ?
                new ObjectParameter("IncludeHeader", includeHeader) :
                new ObjectParameter("IncludeHeader", typeof(bool));
    
            var addHeaderLayoutParameter = addHeaderLayout.HasValue ?
                new ObjectParameter("AddHeaderLayout", addHeaderLayout) :
                new ObjectParameter("AddHeaderLayout", typeof(bool));
    
            var headerLayoutParameter = headerLayout != null ?
                new ObjectParameter("HeaderLayout", headerLayout) :
                new ObjectParameter("HeaderLayout", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcUpdateReportLayout", reportIDSysParameter, formatNameParameter, formatTypeParameter, fileExtentionParameter, delimiterParameter, textGualifierParameter, encodingParameter, startExportRowParameter, includeHeaderParameter, addHeaderLayoutParameter, headerLayoutParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcCreateReportLayout(string forTable, string formatName, string formatType, string fileExtention, string delimiter, string textGualifier, string encoding, Nullable<int> startExportRow, Nullable<bool> includeHeader, Nullable<bool> addHeaderLayout, string headerLayout, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var forTableParameter = forTable != null ?
                new ObjectParameter("ForTable", forTable) :
                new ObjectParameter("ForTable", typeof(string));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var formatTypeParameter = formatType != null ?
                new ObjectParameter("FormatType", formatType) :
                new ObjectParameter("FormatType", typeof(string));
    
            var fileExtentionParameter = fileExtention != null ?
                new ObjectParameter("FileExtention", fileExtention) :
                new ObjectParameter("FileExtention", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var textGualifierParameter = textGualifier != null ?
                new ObjectParameter("TextGualifier", textGualifier) :
                new ObjectParameter("TextGualifier", typeof(string));
    
            var encodingParameter = encoding != null ?
                new ObjectParameter("Encoding", encoding) :
                new ObjectParameter("Encoding", typeof(string));
    
            var startExportRowParameter = startExportRow.HasValue ?
                new ObjectParameter("StartExportRow", startExportRow) :
                new ObjectParameter("StartExportRow", typeof(int));
    
            var includeHeaderParameter = includeHeader.HasValue ?
                new ObjectParameter("IncludeHeader", includeHeader) :
                new ObjectParameter("IncludeHeader", typeof(bool));
    
            var addHeaderLayoutParameter = addHeaderLayout.HasValue ?
                new ObjectParameter("AddHeaderLayout", addHeaderLayout) :
                new ObjectParameter("AddHeaderLayout", typeof(bool));
    
            var headerLayoutParameter = headerLayout != null ?
                new ObjectParameter("HeaderLayout", headerLayout) :
                new ObjectParameter("HeaderLayout", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcCreateReportLayout", forTableParameter, formatNameParameter, formatTypeParameter, fileExtentionParameter, delimiterParameter, textGualifierParameter, encodingParameter, startExportRowParameter, includeHeaderParameter, addHeaderLayoutParameter, headerLayoutParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcCreateImportDefinition(string forTable, string formatName, string delimiter, Nullable<int> maxHeading, string encoding, Nullable<bool> skipFirstRecode, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var forTableParameter = forTable != null ?
                new ObjectParameter("ForTable", forTable) :
                new ObjectParameter("ForTable", typeof(string));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var maxHeadingParameter = maxHeading.HasValue ?
                new ObjectParameter("MaxHeading", maxHeading) :
                new ObjectParameter("MaxHeading", typeof(int));
    
            var encodingParameter = encoding != null ?
                new ObjectParameter("Encoding", encoding) :
                new ObjectParameter("Encoding", typeof(string));
    
            var skipFirstRecodeParameter = skipFirstRecode.HasValue ?
                new ObjectParameter("SkipFirstRecode", skipFirstRecode) :
                new ObjectParameter("SkipFirstRecode", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcCreateImportDefinition", forTableParameter, formatNameParameter, delimiterParameter, maxHeadingParameter, encodingParameter, skipFirstRecodeParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual int ProcUpdateImportDefinition(Nullable<int> importIDSys, string formatName, string delimiter, Nullable<int> maxHeading, string encoding, Nullable<bool> skipFirstRecode, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var importIDSysParameter = importIDSys.HasValue ?
                new ObjectParameter("ImportIDSys", importIDSys) :
                new ObjectParameter("ImportIDSys", typeof(int));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var maxHeadingParameter = maxHeading.HasValue ?
                new ObjectParameter("MaxHeading", maxHeading) :
                new ObjectParameter("MaxHeading", typeof(int));
    
            var encodingParameter = encoding != null ?
                new ObjectParameter("Encoding", encoding) :
                new ObjectParameter("Encoding", typeof(string));
    
            var skipFirstRecodeParameter = skipFirstRecode.HasValue ?
                new ObjectParameter("SkipFirstRecode", skipFirstRecode) :
                new ObjectParameter("SkipFirstRecode", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcUpdateImportDefinition", importIDSysParameter, formatNameParameter, delimiterParameter, maxHeadingParameter, encodingParameter, skipFirstRecodeParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual ObjectResult<string> ProcImportDataToTable(Nullable<int> importSysID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlData)
        {
            var importSysIDParameter = importSysID.HasValue ?
                new ObjectParameter("ImportSysID", importSysID) :
                new ObjectParameter("ImportSysID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDataParameter = xmlData != null ?
                new ObjectParameter("XmlData", xmlData) :
                new ObjectParameter("XmlData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProcImportDataToTable", importSysIDParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDataParameter);
        }
    
        public virtual int ProcInsertImportHistory(Nullable<int> importDefinitionIDSys, string fileName, string result, Nullable<bool> success, Nullable<System.DateTime> createdDate, string userUpdate)
        {
            var importDefinitionIDSysParameter = importDefinitionIDSys.HasValue ?
                new ObjectParameter("ImportDefinitionIDSys", importDefinitionIDSys) :
                new ObjectParameter("ImportDefinitionIDSys", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            var successParameter = success.HasValue ?
                new ObjectParameter("Success", success) :
                new ObjectParameter("Success", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcInsertImportHistory", importDefinitionIDSysParameter, fileNameParameter, resultParameter, successParameter, createdDateParameter, userUpdateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcCreateDimensionLayout(string formatName, string unit, Nullable<int> width, Nullable<int> length, Nullable<int> height, Nullable<int> weight, string type, string color, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate)
        {
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcCreateDimensionLayout", formatNameParameter, unitParameter, widthParameter, lengthParameter, heightParameter, weightParameter, typeParameter, colorParameter, createdDateParameter, updatedDateParameter, userUpdateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcUpdateDimensionLayout(Nullable<int> dimensionIDSys, string formatName, string unit, Nullable<int> width, Nullable<int> length, Nullable<int> height, Nullable<int> weight, string type, string color, Nullable<System.DateTime> updatedDate, string userUpdate)
        {
            var dimensionIDSysParameter = dimensionIDSys.HasValue ?
                new ObjectParameter("DimensionIDSys", dimensionIDSys) :
                new ObjectParameter("DimensionIDSys", typeof(int));
    
            var formatNameParameter = formatName != null ?
                new ObjectParameter("FormatName", formatName) :
                new ObjectParameter("FormatName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcUpdateDimensionLayout", dimensionIDSysParameter, formatNameParameter, unitParameter, widthParameter, lengthParameter, heightParameter, weightParameter, typeParameter, colorParameter, updatedDateParameter, userUpdateParameter);
        }
    
        public virtual int ProcDeleteImportDefinition(Nullable<int> importIDSys)
        {
            var importIDSysParameter = importIDSys.HasValue ?
                new ObjectParameter("ImportIDSys", importIDSys) :
                new ObjectParameter("ImportIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcDeleteImportDefinition", importIDSysParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcCreateZoneLayout(string zoneName, string warehouse, string area, Nullable<int> totalFloor, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            var warehouseParameter = warehouse != null ?
                new ObjectParameter("Warehouse", warehouse) :
                new ObjectParameter("Warehouse", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var totalFloorParameter = totalFloor.HasValue ?
                new ObjectParameter("TotalFloor", totalFloor) :
                new ObjectParameter("TotalFloor", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcCreateZoneLayout", zoneNameParameter, warehouseParameter, areaParameter, totalFloorParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual int ProcUpdateZoneLayout(Nullable<int> zoneIDSys, string zoneName, string warehouse, string area, Nullable<int> totalFloor, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var zoneIDSysParameter = zoneIDSys.HasValue ?
                new ObjectParameter("ZoneIDSys", zoneIDSys) :
                new ObjectParameter("ZoneIDSys", typeof(int));
    
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            var warehouseParameter = warehouse != null ?
                new ObjectParameter("Warehouse", warehouse) :
                new ObjectParameter("Warehouse", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var totalFloorParameter = totalFloor.HasValue ?
                new ObjectParameter("TotalFloor", totalFloor) :
                new ObjectParameter("TotalFloor", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcUpdateZoneLayout", zoneIDSysParameter, zoneNameParameter, warehouseParameter, areaParameter, totalFloorParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual int ProcCreateRackLayout(Nullable<int> zoneIDSys, Nullable<int> zoneID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, string userUpdate, string xmlDetail)
        {
            var zoneIDSysParameter = zoneIDSys.HasValue ?
                new ObjectParameter("ZoneIDSys", zoneIDSys) :
                new ObjectParameter("ZoneIDSys", typeof(int));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var userUpdateParameter = userUpdate != null ?
                new ObjectParameter("UserUpdate", userUpdate) :
                new ObjectParameter("UserUpdate", typeof(string));
    
            var xmlDetailParameter = xmlDetail != null ?
                new ObjectParameter("XmlDetail", xmlDetail) :
                new ObjectParameter("XmlDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcCreateRackLayout", zoneIDSysParameter, zoneIDParameter, createdDateParameter, updatedDateParameter, userUpdateParameter, xmlDetailParameter);
        }
    
        public virtual ObjectResult<RackLayout> ProcGetRackLayout(Nullable<int> zoneIDSys, Nullable<int> zoneID)
        {
            var zoneIDSysParameter = zoneIDSys.HasValue ?
                new ObjectParameter("ZoneIDSys", zoneIDSys) :
                new ObjectParameter("ZoneIDSys", typeof(int));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RackLayout>("ProcGetRackLayout", zoneIDSysParameter, zoneIDParameter);
        }
    
        public virtual ObjectResult<RackLayout> ProcGetRackLayoutByZoneIDSys(Nullable<int> zoneIDSys)
        {
            var zoneIDSysParameter = zoneIDSys.HasValue ?
                new ObjectParameter("ZoneIDSys", zoneIDSys) :
                new ObjectParameter("ZoneIDSys", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RackLayout>("ProcGetRackLayoutByZoneIDSys", zoneIDSysParameter);
        }
    }
}
